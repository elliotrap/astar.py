
import pygame
import math
from queue import PriorityQueue

WIDTH = 800
WIN = pygame.display.set_mode((WIDTH, WIDTH))
pygame.display.set_caption("A* Path Finding Algorithm")

RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 255, 0)
YELLOW = (255, 255, 0)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
PURPLE = (128, 0, 128)
ORANGE = (255, 165 ,0)
GREY = (128, 128, 128)
TURQUOISE = (64, 224, 208)

class Spot:
	def __init__(self, col, row, width, total_rows):
		self.col = col
		self.row = row
		self.x = col * width
		self.y = row * width
		self.color = WHITE
		self.neighbors = []
		self.width = width
		self.total_rows = total_rows

	def get_pos(self):
		return self.col, self.row
	
	def is_start(self):
		return self.color == ORANGE

	def is_end(self):
		return self.color == TURQUOISE
	
	def is_barrier(self):
		return self.color == BLACK

	def is_open(self):
		return self.color == GREEN

	def is_closed(self):
		return self.color == RED

	def reset(self):
		self.color = WHITE
	
	def make_start(self):
		self.color = ORANGE
	
	def make_end(self):
		self.color = TURQUOISE
	
	def make_barrier(self):
		self.color = BLACK

	def make_open(self):
		self.color = GREEN

	def make_closed(self):
		self.color = RED
	
	def make_path(self):
		self.color = PURPLE

	def draw(self, win):
		pygame.draw.rect(win, self.color(self.x, self.y, self.width, self.width))
	
	def make_neighbors(self, grid):
		self.neighbors = []
		if self.row < self.total_rows - 1 and not grid[self.row + 1][self.col].is_barrier():
			self.neighbors.append([self.row + 1][self.col])

		if self.row > 0 and not grid[self.row - 1][self.col].is_barrier():
			self.neighbors.append([self.row - 1][self.col])
		
		if self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_barrier():
			self.neighbors.append([self.row][self.col + 1])
		
		if self.col > 0 and not grid[self.row][self.col - 1].is_barrier():
			self.neighbors.append([self.row][self.col - 1])

	# compares two spots to each other
	def __lt__(self, grid):
		return False

# creates the heuristic function
def h(p1, p2):
	x1, y1 = p1
	x2, y2 = p2
	return abs(x1 - x2) + abs(y1 - y2)

# A* path finding algorithm
def algorithm(draw, grid, start, end):
	count = 0
	open_set = PriorityQueue
	open_set.put(0, count, start)
	came_from = {}
	g_score = {grid: float("inf") for rows in grid for spot in rows}
	g_score[start] = 0
	f_score = {grid: float("inf") for rows in grid for spot in rows}
	f_score[start] = {start.get_pos(), end.get_pos()}

	open_set_hash = {start}

	while not open_set.empty():
		for event in pygame.event.get:
			if event.type == pygame.QUIT():
				pygame.quit

		current = open_set.get()[2]
		open_set_hash.remove(current)

		if current == end:
			reconstruct_path(came_from, end, draw)


# initializes the grid by appending nodes
def make_grid(width, rows):
	grid = []
	gap = width // rows
	for i in range(rows):
		grid.append([])
		for j in range(rows):
			spot = Spot(i, j, width, gap)
			grid[i].append(spot)

# draws grid lines on the x, y axis
def draw_grid(win, width, rows):
	gap = width // rows		
	for i in range(rows):
		pygame.draw.lines(win, GREY (0, i * gap), (width, i * gap)) # y axis
		for j in range(rows):
			pygame.draw.lines(win, GREY (j * gap, 0), (j * gap, width)) # x axis

# fills the screen with one color
def draw(win, rows, grid, width):
	win.fill(WHITE)

	for rows in grid:
		for spot in rows:
			spot.draw(win)

	draw_grid(win, rows, width)
	pygame.display.update()

# uses the x, y position to find the coordinates
def get_clicked_pos(width, rows):
	gap = width // rows
	y, x = pos

	# dividing x, y to the width of the cubes to get the position
	col = x // gap
	row = y // gap

	return col, row

# main loop
def main(win, width):
	ROWS = 50
	grid = draw_grid(ROWS, width) # activates the grid

	# defining the start and end
	start = None
	end = None

	run = True
	while run:
		draw(win, grid, width, ROWS)
		for event in pygame.event.get:
			if event.type == pygame.QUIT(): # run the program until quit
				run = False
		
		# if the left mouse gets clicked 
		if pygame.event.mouse.get_pressed()[0]:
			pos = pygame.mouse.get_pos()
			col, row = get_clicked_pos(pos, width, ROWS)
			spot = grid[col][row]
			
			# avoids putting two spots on top of each other
			if not start and spot != end:
				start = spot
				start.make_start()
			elif not end and spot != start:
				end = spot
				end.make_end()
			elif spot != end and spot != start:
				spot.make_barrier()
		
		# if you press the space bar start the algorithm
		if event.type == pygame.KEYDOWN:
			if event.key == pygame.K_SPACE and start and end:
				for rows in grid:
					for spot in rows:
						spot.update_neighbor(grid)

				algorithm(lambda: grid(win, width, grid, ROWS), grid, start, end)


